%{
    Author: Sai Himal Allu
    Course: ECN-614
    Instructor: Dr Debashis Ghosh
    Email: sallu@ec.iitr.ac.in

    The following module is intended to be a part of the solution set to an ECN-614 
    assignement that was undertaken by the author as a part of his regular coursework 
    for Spring 2020 semester. Duplication of any part of this assignment without the 
    prior permission of the author is strictly prohibited.
%}

%{
    Question:
        Given the input x[n], an LMS filter is used to recursively estimate the unknown AR
        parameters a 1 and a2 . Write a MATLAB program for the same.

        Generate a sequence of 10,000 samples of x [n], 1 ≤ n ≤ 10,000, taking a 1 = 1.2,
        a2 = −0.8 and σ w2 = 0.3. Assume x[n] = 0 for all n < 1. Using this x [n] as input and
        starting with zero initial parameter values, i.e., a1[1] = 0 and a2 [1] = 0, run the above
        program with step-size parameter μ = 0.05. Plot the estimated parameter values a1[n]
        and a 2 [n] as a function of the iteration number n.

        Repeat the above for 10 trials using different noise sequences. Hence, plot the learning
        curve for the average MSE by averaging over these 10 trials. Comment on your results.
%}

%{
    Solution Idea:
        The AR process given in the assignment can be interpreted to be a forward prediction 
        filter. In such a scenario, we need to predict future values of the AR process using 
        the values that had been encountered by the algorithm so far. This solution set is 
        implemented basing off this idea. 

%}

clear all;
clc;
clf;

T     = 10002;                                                         		%Pad the observations with initial values
a1    = 1.2;                                                           		%Value of a1 (coefficient on x(t-1))
a2    = -0.8;                                                          		%Value of a2 (coefficient on x(t-2))
sigma = sqrt(0.3);                                                     		%Value of the s.d. of the error term
mu_e  = 0;                                                             		%Value of the mean of the error term
nu = 0.05;                                                             		%Step size parameter
num_trials = 30;

MSE_10 = zeros(num_trials, 1);
error_iter = zeros(T-2, num_trials);

for iteration_count=1:num_trials;                                           %Iteration count to carry out 10 trials of this experiment
    
    %Generating the input to the LMS filter
    x = ones(T, 1);                                                         %Initialize the input array
    x(1) = 0;                                                              	%Initialize the first value of the input array to 0
    x(2) = 0;                                                              	%Initialize the second value of the input array to 0 
    eps  = normrnd(mu_e, sigma, T, 1);                                    	%White Gaussian Noice of 0 mean and variance = 0.3 

    for t=3:T;                                                             	%Start the loop running from obs. 3 to 10002 
        x(t) = a1 * x(t-1) + a2 * x(t-2) + eps(t-2);                       	%Generate the auto-regressive process of order 2
    end

    disp_x = x; 
    disp_x(1) = [];
    disp_x(1) = []; 

    %Plot the autoregressive process of order 2
    if iteration_count == 1
        figure (1);
        plot(disp_x);
        title('AR process of order 2');
        xlabel('t');
        ylabel('x(t)');
    end 

    %Implementing the LMS algorithm

    %Initialize the AR parameters
    a_hat = zeros(T-1, 2);

                                                                        %Run this loop for the 10000 samples that were generated by the AR process
    for t=3:T;                                                          %Run this loop for the 10000 samples generated by the input
        error_iter(t-2, iteration_count) = x(t) ... 
        - (a_hat(t-2, 1:2) * x(t-2:t-1));        						

        a_hat(t-1, 1:2) = a_hat(t-2, 1:2) ...							%Calculate the error between the predicted value and the actual value
        + nu * x(t-2:t-1)' * error_iter(t-2, iteration_count);  		%Update rule for the LMS algorithm
    end

    %tf = isequal(error_iter(:, 1), error_iter(:, 2));
	%disp(tf);
    
    MSE_10(iteration_count) = (1/10000) * ...
    norm(error_iter(:, iteration_count), 2) ^ 2;               			%Calculate the MSE for this particular iteration
    
    a_hat(1, :) = [];
    
    %Plot the first AR parameter for the first iteration only
    if iteration_count == 1                     
        average_value_ar1 = mean(a_hat(:, 2));
        figure(2);
        ha = plot(a_hat(:, 2)); hold on;                                %Initial value of a1 is not plotted for the sake of this assignment
        hb = plot(xlim, average_value_ar1*[1 1]); hold off; 
        gravstr1 = sprintf('Averaged Value = %.2f',average_value_ar1);
        legend([hb], gravstr1);
        title('First AR parameter'); 
        xlabel('t');
        ylabel('a_1'); 
    end

    %Plot the second AR parameter for the first iteration only
    if iteration_count == 1
        average_value_ar2 = mean(a_hat(:, 1));        
        figure(3);
        hc = plot(a_hat(:, 1)); hold on;                                %Initial value of a2 is not plotted for the sake of this assignment 
        hd = plot(xlim, average_value_ar2*[1 1]); hold off;  
        gravstr2 = sprintf('Averaged Value = %.2f',average_value_ar2);
        legend([hd], gravstr2);
        title('Second AR parameter'); 
        xlabel('t');
        ylabel('a_2');  
    end
end

%Plot the error signal across the 10 trials
figure(4);
he = plot(1/30 * sum(error_iter.^2, 2)); 
title('Error averaged across 30 trials');
xlabel('t');
ylabel('Averaged Error across 30 trials');
legend([he], 'Error')
ylim([0, 4]); 
set(gca,'ytick',[0:1:4]);

%Plot the MSE values
figure(5); 
hf = plot(MSE_10); 
title('MSE averaged over 30 trials');
xlabel('Iteration Number'); 
ylabel('Mean Sqauared Error');
legend([hf], 'MSE'); 
figure(5); 